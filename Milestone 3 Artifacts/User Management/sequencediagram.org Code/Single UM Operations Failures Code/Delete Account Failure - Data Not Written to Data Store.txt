title User Management Single Operation Fail - Delete Account - Did Not Write to Data Store

#participant "System Administrator" as admin
participant "Command Line" as cmd
participant "Main : umEntry" as entry
participant "umManager : umManager" as manager
participant "umService : umService" as service
participant "umDAO : MSSQLUMGateway" as umDAO
participant "SQL Server" as umStore
participant "umLogger : LogWriter" as logger
participant "umAuthorization : Authorization" as authZ
participant "umAuthentication : Authentication" as authN

activate cmd

cmd->entry : User has selected "Delete Account"
#instantiations
activate entry
entry->entry : Validate input (request : int)
#	instantiate authentication
entry->authN : umAuthentication = new Authentication()
activate authN
authN->authN : Constructor
authN-->entry : return umAuthentication
deactivate authN
#	instantiate authorization
entry->authZ : new umAuthorization(umAuthentication : Authentication)
activate authZ
authZ->authZ : Constructor
authZ-->entry : return umAuthentication
deactivate authZ
#	instantiate gateway
entry->umDAO : dao = new umDAO()
activate umDAO
umDAO->umDAO : Constructor
umDAO-->entry : return dao
deactivate umDAO
#	instantiate service
entry->service : service = new umService(umDAO : MSSQLUMGateway) 
activate service
service->service : Constructor
service-->entry : return service
deactivate service
#	instantiate logger
entry->logger : umLogger = new LogWriter()
activate logger
logger->logger : Constructor
logger-->entry : return umLogger
deactivate logger
#	instantiate manager
entry->manager : manager = new umManager(userID : String, umService : umService, umAuthorization : Authorization)
activate manager
manager->manager: Constructor
manager-->entry : return manager
deactivate manager


#begin functionality
entry->manager : umManager.DeleteAccount(userName : String, email : String, password : String)
activate manager

#authorize user before proceeding to functionality
manager->authZ : umAuthorization.AuthorizeUser(userID : String)
activate authZ
#	authorization depends on authentication first
authZ->authN : umAuthentication.AuthenticateUser(userID : String)
activate authN
authN->authZ : True : Boolean
deactivate authN
authZ-->manager : True : Boolean
deactivate authZ

#authorization complete, continue to functionality
manager->manager: Stopwatch stopwatch = new Stopwatch();\nstopwatch.Start();
manager->service : operationSuccessful = umService.DeleteAccount(userName : String, email : String, password : String)
activate service
service->umDAO : umDAO.DeleteFromDataStore(userName : String, email : String, password : String)
activate umDAO
umDAO->umDAO : String query = $"DELETE FROM users\n    WHERE username = {userName}, email = {email}, password = {password}"
umDAO->umStore : DELETE FROM users\n    WHERE username = userName, email = email, password = password
activate umStore
umStore->umStore : Delete row from table
note right of umStore:Latest data is not written to the data store

#return chain
umStore-->umDAO : Error code
deactivate umStore
umDAO-->service : False : Boolean
deactivate umDAO
service-->manager : False : Boolean
deactivate service
manager->manager: stopwatch.Stop()
#before completing functionality, perform logging
manager-->logger : umLogger.Write(userID : int, logLevel : enum, category : enum, message : String)
activate logger
logger->logger : Refer to the Logging Sequence Diagram
logger-->manager : True : Boolean
deactivate logger
manager->manager: return (operationSuccessful && stopwatch.ElapsedMilliseconds <= 5000)
note left of manager:The response should occur within 5 seconds of invocation.
note left of manager:<size:20>â†“
manager-->entry: True : Boolean
deactivate manager
entry-->cmd : Single UM Operation Successful
deactivate entry
deactivate cmd

# NOTES: 
#	- Implement AUTHN & AUTHZ
#	- Layer names correct?