title Archiving Success Scenario

participant "entryPoint : EntryPoint" as control
participant "archivingManager : ArchivingManager" as manager
participant "archivingService : ArchivingService" as service
participant "logGateway : SQLLogGateway" as reader
participant "SQL Server" as logs
participant "archiveGateway : CompressingFileSystemLogGateway" as writer
participant "Web Host File System" as archive
participant "logger : LogWriter" as logger

#Instantiations (Dependency injection)
activate control
control->logger:new LogWriter()
activate logger
logger->logger:Constructor
logger-->control:LogWriter instance
deactivate logger
control->reader:new SQLLogGateway(String serverConnectionString)
activate reader
reader->reader:Constructor
reader-->control:SQLLogGateway instance
deactivate reader
control->writer:new CompressingFileSystemLogGateway(String fileLocation)
activate writer
writer->writer:Constructor
writer-->control:CompressingFileSystemLogGateway instance
deactivate writer
control->service:new ArchivingService(logGateway : ILogGateway, archiveGateway : ILogGateway)
activate service
service->service:Constructor
service-->control:ArchivingService instance
deactivate service
control->manager:new ArchivingManager(archivingService : ArchivingService, logger : LogWriter)
activate manager
manager->manager:Constructor
manager-->control:ArchivingManager instance
deactivate manager

#begin infinite loop
control-->manager:Manager.begin()
activate manager
note left of manager:Manager.begin() begins an endless loop calling waitForArchive()

#await archive time
manager->manager:waitForArchive()
note right of manager:waitForArchive() waits until 00:00:00 AM local time\non the first of the month then calls the next method.

#begin service
manager->service:archivingService.archiveData(minimumAge : int, tableName : String)
activate service
service->service:Get timestamp of date 30 days ago

#begin querying log database
service->reader:logGateway.readLogsWhere(columnName : String, comparator : Enum, value : String)
activate reader
reader->reader:Build SQL SELECT query with timestamp string
reader->logs:SELECT statement
activate logs
logs->logs:Process query
logs-->reader:Selected rows
deactivate logs
reader->reader:Verify that selected rows satisfy readLogsWhere() comparison
reader-->service:readLogs : DataTable
deactivate reader

#write queried logs to file
service->writer:archiveGateway.writeLogs(logs : DataTable)
activate writer
writer->archive:New .txt file
archive-->writer:Success
activate archive
writer->writer:Loop through readLogs rows
writer->archive:Write each iterated row of readLogs to .txt file
archive-->writer:Success
writer->archive:Compress .txt file to .zip file
archive-->writer:Success
deactivate archive
writer-->service:true : Boolean
deactivate writer

#delete archived logs
service->reader:logGateway.deleteLogsWhere(columnName : String, comparator : Enum, value : String)
activate reader
reader->reader: Build SQL DELETE statement with timestamp string
reader->logs:DELETE statement
activate logs
logs->logs:Process query
logs-->reader:Deleted rows
deactivate logs
reader->reader:Verify that deleted rows satisfy deleteLogsWhere() comparison
reader-->service:deletedLogs : DataSet
deactivate reader

#function verification
service->service:Verify that deletedLogs matches readLogs
service->service:Get number of logs archived
service-->manager:logsArchived : int
deactivate service

#perform logging
manager-->logger: logger.write(userID : int, logLevel : enum, category : enum, message : string)
activate logger
logger->logger:Refer to the "Logging Success Scenario" diagram
logger-->manager: true : boolean
deactivate logger

#loop continues
manager->manager:waitForArchive()